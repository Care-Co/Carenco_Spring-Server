name: Java CI with Gradle

# master 브랜치의 push와 pull로 CI가 작동
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    
# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-1
  S3_BUCKET_NAME: psh-github-actions-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: sh-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: sh-codedeploy-deployment-group

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
      # 자신이 사용하는 자바 버전에 맞춰주자
        java-version: '17'
        distribution: 'temurin'
    
    # gradlew에 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    # gradlew 빌드
    - name: Build with Gradle
      run: ./gradlew clean build
      
    #2
    # AWS 계정 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
      # 깃허브 Secret에 넣어둔 Access key
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      # 깃허브 Secret에 넣어둔 Secret key
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_ID }}
      # 깃허브 Secret에 넣어둔 Region
        aws-region: ${{ env.AWS_REGION }}

    #3
    # 만들어 놓은 S3에 해당 zip 파일 저장
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .
    
    #4
    # AWS CodeDeploy에 배포
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
